- hosts: 127.0.0.1
  environment:
    VAULT_ADDR: https://vault.thesniderpad.com
    password: '{{ vaulted.LINUX_CLEAR_PASSWORD }}'
    username: '{{ vaulted.SHIRAZ_ADMIN_USER }}'
    url: '{{ vaulted.SHIRAZ_URL }}'
  vars:
    vaulted: "{{ lookup('hashi_vault', 'url=https://vault.thesniderpad.com secret=ansible/data/variables')}}" # pragma: allowlist secret
  tasks:

  - name: Remove all hosts from known hosts
    ansible.builtin.known_hosts:
      name: "{{ hostvars[item].hostname }}"
      state: absent
    loop: '{{ groups[cluster]|flatten(levels=1) }}'


  # This will run a script that will delete all the luns. It loops through
  # the group passed on the cmd line as cluster
  # Todo: make that a variable somehow.
  - name: Delete each of the iscsi luns for the nodes in the group
    shell: ~/code/ansible/.venv/bin/python3 ./utilities/v2/delete_lun.py {{ item }} {{ hostvars[item].pool }} {{ hostvars[item].zfs_snapshot }} {{ hostvars[item].dataset }}
    loop: '{{ groups[cluster]|flatten(levels=1) }}'

# Create the LUNS on shiraz for Raspberry Pi
  - name: Create each of the iscsi luns for the nodes in the group rpimaster
    shell: ~/code/ansible/.venv/bin/python3 ./utilities/v2/create_lun.py {{ item }} {{ hostvars[item].pool }} {{ hostvars[item].zfs_snapshot }} {{ hostvars[item].dataset }} {{ hostvars[item].extent_filename }} {{ hostvars[item].blocksize }}
    loop: '{{ groups[cluster]|flatten(levels=1) }}'

- hosts: gw
  tasks:

    # Every host should have a host setting on the gateway as well as
    # working DNS.
  - name: Make sure the static dhcp entry is on the gateway
    lineinfile:
      path: /etc/ethers
      regexp: ^{{ hostvars[item].hostmac }}.*
      line: '{{ hostvars[item].hostmac }} {{ hostvars[item].ip }}'
    loop: '{{ groups[cluster]|flatten(levels=1) }}'
    notify:
    - restart dnsmasq

  - name: Make sure the dns entry is on the gateway
    lineinfile:
      path: /etc/hosts
      regexp: ^{{ hostvars[item].ip }} .*
      line: '{{ hostvars[item].ip}} {{ hostvars[item].hostname }}.thesniderpad.com'
    loop: '{{ groups[cluster]|flatten(levels=1) }}'
    notify:
    - restart dnsmasq

    # Create the file that is used to copy the boot directory for the PXE clients
  - name: Create the create_new_pxe_client file
    copy:
      src: create_new_pxe_client.sh
      dest: /tftproot/create_new_pxe_client.sh
      owner: root
      group: root
      mode: 0755

    # Create/recreate the boot directory
  - name: Recreate the boot directory
    command: /tftproot/create_new_pxe_client.sh {{ hostvars[item].serial }} {{ hostvars[item].hostname }}
    args:
      chdir: /tftproot
    loop: '{{ groups[cluster]|flatten(levels=1) }}'
    when: hostvars[item].serial is defined   # we only do this for raspberry pi's, intel boxes boot straight from the iscsi lun
    tags: recreate-boot-directory

  handlers:
  - name: restart dnsmasq
    service:
      name: dnsmasq
      state: restarted

# # Restart the ISCSI service
#   - name: Restart iSCSI Service
#     command: ./utilities/restart_iscsi.py
