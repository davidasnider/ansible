---
# The 'Disable IP V6' task will fail if this file doesn't exist.
- name: check if ipv6 file exists
  stat:
    path: /proc/sys/net/ipv6/conf/all/disable_ipv6
  register: disable_ipv6

# Disable IP V6
- name: Disable IP V6
  sysctl:
    name: net.ipv6.conf.all.disable_ipv6
    value: '1'
    state: present
  when: disable_ipv6.stat.exists # True

- name: Disable Swap on raspbian
  shell: dphys-swapfile swapoff && dphys-swapfile uninstall && update-rc.d dphys-swapfile remove
  ignore_errors: true
  args:
    removes: /var/swap
  when:
  - ansible_os_family == "Debian"
  - ansible_architecture == "armv7l"

- name: Remove swapfile from /etc/fstab
  mount:
    path: none
    fstype: swap
    src: /swapfile
    state: absent
  when:
  - ansible_os_family == "Debian"
  - ansible_architecture == "x86_64"
  tags: swap

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: remove swap file from filesystem
  file:
    path: /swapfile
    state: absent
  tags: swap

- name: Create filesystems on extra disks
  filesystem:
    fstype: ext4
    dev: '{{ item.value.disk }}'
  loop: '{{ k8s_disks|default({})|dict2items }}'
  when: item.key is defined
  tags: testing

- name: Mount and bind a volumes on extra disks
  mount:
    path: '{{ item.value.path }}'
    src: '{{ item.value.disk }}'
    state: mounted
    fstype: ext4
  loop: '{{ k8s_disks|default({})|dict2items }}'
  when: item.key is defined
  tags: testing

# This does a nested loop. for every disk, a directory from 1 to 4 will be
# created inside the mount, we'll use this to create "extra" physical volumes later
- name: create directories for sharing the filesystems
  file:
    path: '{{ item.0.value.path }}/{{ item.1 }}'
    state: directory
    mode: '0755'
  with_nested:
  - '{{ k8s_disks|default({})|dict2items }}'
  - ['1', '2', '3', '4']
  when: item.0.key is defined
  tags: testing

- name: bind mount directories for sharing the filesystems
  mount:
    src: '{{ item.0.value.path }}/{{ item.1 }}'
    path: /k8s_local/{{ item.0.key }}-{{ item.1 }}
    state: mounted
    fstype: none
    opts: bind
  with_nested:
  - '{{ k8s_disks|default({})|dict2items }}'
  - ['1', '2', '3', '4']
  when: item.0.key is defined
  tags: testing

- name: set fact to amd64 for x86_64 architecture
  set_fact:
    hostarch: ""
  when: ansible_architecture == 'x86_64'

- name: set fact to arm for arfmv7l architecture
  set_fact:
    hostarch: "-armhf"
  when: ansible_architecture == 'armv7l'

# Install k3s
- name: install k3s binary
  get_url:
    url: https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/k3s{{ hostarch }}
    dest: /usr/local/bin/k3s
    mode: 'u=rx,g=rx,o=rx'
    group: root
    owner: root

- name: create k3s tool symlinks
  file:
    src: /usr/local/bin/k3s
    state: link
    dest: '/usr/local/bin/{{ item }}'
  loop:
    - kubectl
    - crictl
    - ctr

- name: Ensure hostname is in /etc/hosts
  lineinfile:
    dest: /etc/hosts
    regexp: ^{{ ansible_default_ipv4.address }}.+$
    line: '{{ ansible_default_ipv4.address }} {{ ansible_fqdn }} {{ ansible_hostname }} kubernetes.default'
    mode: '0644'
  register: hostname
  tags: hostname

- name: Create /etc/rancher/k3s directory
  file:
    dest: /etc/rancher/k3s
    state: directory
