- name: Get all existing namespaces
  command: kubectl get namespaces
  args:
    warn: no
  register: namespaces
  changed_when: false
  ignore_errors: true

#### Create the docker registry
# Validate the namespace doesn't already exist
- name: Create the registry namespace when it does not exist
  command: kubectl create namespace docker-registry
  when: "'docker-registry' not in namespaces.stdout"

- name: Get the docker-registry repo
  git:
    repo: git@bitbucket.org:davidasnider/docker-registry.git
    dest: /usr/local/src/docker-registry
    key_file: /home/ansible/.ssh/id_rsa
    depth: '1'
    accept_hostkey: yes
    version: "master"
  tags: docker-registry

# - name: Create the registry physical volume
#   command: kubectl apply -f /usr/local/src/docker-registry/registry-pv.yaml
#   changed_when: false

- name: Create the docker registry services and pods
  command: kubectl apply -f /usr/local/src/docker-registry/registry-manifest.yaml
  changed_when: false
  tags: docker-registry

#### Setup the Remote-ssh service
# Get the code
- name: Get the python-scripts repo
  git:
    repo: git@bitbucket.org:davidasnider/python-scripts.git
    dest: /usr/local/src/python-scripts
    key_file: /home/ansible/.ssh/id_rsa
    depth: '1'
    accept_hostkey: yes
    version: "master"

# Create the namespace and secrets
- name: Run the script to create remote-shell
  command: /usr/local/src/python-scripts/docker-remote-shell/create_secrets.sh
  args:
    chdir: /usr/local/src/python-scripts/docker-remote-shell
  changed_when: false

# Create the pods and services
- name: Run the script to create remote-shell pods and services
  command: kubectl apply -f /usr/local/src/python-scripts/docker-remote-shell/remote-shell.yaml
  args:
    chdir: /usr/local/src/python-scripts/docker-remote-shell
  changed_when: false

#### Create the mailrelay service
- name: Create the mailrelay namespace when it does not exist
  command: kubectl create namespace mailrelay
  when: "'mailrelay' not in namespaces.stdout"

- name: copy the mailrelay manifest
  template:
    src: mailrelay.yaml
    dest: /etc/kubernetes/mailrelay.yaml
    owner: root
    group: root
    mode: '0644'
  register: mailrelay_manifest_changed

- name: Create the mailrelay pods and services
  command: kubectl apply -f /etc/kubernetes/mailrelay.yaml
  register: mailrelay
  changed_when: "'configured' in mailrelay.stdout"


# Setup rundeck
- name: Get the rundeck repo
  git:
    repo: git@bitbucket.org:davidasnider/rundeck.git
    dest: /usr/local/src/rundeck
    key_file: /home/ansible/.ssh/id_rsa
    depth: '1'
    accept_hostkey: yes
    version: "master"
  tags: rundeck


# Create the pods and services
- name: Apply Rundeck Prod Kustomize script
  command: kubectl apply -k prod
  args:
    chdir: /usr/local/src/rundeck
  changed_when: false
  tags: rundeck

#### Create the tesla namespace and secrets
- name: Get the tesla-collector repo
  git:
    repo: git@github.com:davidasnider/tesla-collector.git
    dest: /usr/local/src/tesla-collector
    key_file: /home/ansible/.ssh/id_rsa
    depth: '1'
    accept_hostkey: yes
    version: "main"
  tags: tesla-collector
  notify: Recreate Tesla Job

- name: Create Secrets file for tesla collector
  template:
    src: tesla-secret.yaml
    dest: /usr/local/src/tesla-secret.yaml
    owner: root
    group: root
    mode: '0600'
  tags: tesla-collector
  notify: Create Tesla Secret

- name: Check if tesla job exists
  command: kubectl get job -n rundeck tesla-collector
  register: teslacollectorjob
  ignore_errors: true
  tags: tesla-collector
  changed_when: false

- name: Check if tesla secret exists
  command: kubectl get secret -n rundeck credentials
  register: teslacollectorsecret
  ignore_errors: true
  tags: tesla-collector
  changed_when: false

- name: Recreate Tesla Job
  command: kubectl apply -k prod
  args:
    chdir: /usr/local/src/tesla-collector/k8s
  when: teslacollectorjob.failed
  tags: tesla-collector

- name: Recreate Tesla Secret
  command: kubectl apply -f /usr/local/src/tesla-secret.yaml
  args:
    chdir: /usr/local/src/tesla-collector/k8s
  when: teslacollectorsecret.failed
  tags: tesla-collector

# Setup Icinga Prod Services
- name: Get the Icinga repo
  git:
    repo: https://github.com/davidasnider/icinga_k8s.git
    dest: /usr/local/src/icinga
    depth: '1'
    accept_hostkey: yes
    version: "main"
    force: yes
  tags: icinga
  changed_when: false

  # Replace all secrets with valid replacements
- name: Add the real secrets to Icinga repositories
  replace:
    path: "/usr/local/src/icinga/{{ item.path }}"
    regexp: "{{ item.regexp1 }}"
    replace: "{{ item.replace }}"
  with_items:
    - { path: 'bases/api-users.conf', regexp1: 'thisisnottherealpassword', replace: "{{ vaulted.icinga_api_users }}" }
    - { path: 'bases/ido-pgsql.conf', regexp1: 'thisisnottherealpassword', replace: "{{ vaulted.icinga_ido }}" }
    - { path: 'bases/resources.ini', regexp1: 'thisisnottherealpassword', replace: "{{ vaulted.icinga_resources_ini }}" }
    - { path: 'bases/commandtransports.ini', regexp1: 'thisisnottherealpassword', replace: "{{ vaulted.icinga_api_users }}" }
    - { path: 'bases/icinga_check_netatmo.py', regexp1: 'thisisnottherealclientid', replace: "{{ vaulted.netatmo_client_id }}" }
    - { path: 'bases/icinga_check_netatmo.py', regexp1: 'thisisnottherealclientsecret', replace: "{{ vaulted.netatmo_client_secret }}" }
    - { path: 'bases/icinga_check_netatmo.py', regexp1: 'thisisnottherealusername', replace: "{{ vaulted.netatmo_username }}" }
    - { path: 'bases/icinga_check_netatmo.py', regexp1: 'thisisnottherealpassword', replace: "{{ vaulted.netatmo_password }}" }
    - { path: 'primary/kustomization.yaml', regexp1: 'thisisnottherealpassword', replace: "{{ vaulted.icinga_api_users }}" }
    - { path: 'secondary/kustomization.yaml', regexp1: 'thisisnottherealpassword', replace: "{{ vaulted.icinga_api_users }}" }
    - { path: 'bases/password', regexp1: 'thisisnottherealsecret\n', replace: "{{ vaulted.icinga_resources_ini }}" }
    - { path: 'bases/ifttt-webhook-host-notification.sh', regexp1: 'thisisnottherealsecret', replace: "{{ vaulted.ifttt_webhook_key }}" }
    - { path: 'bases/ifttt-webhook-service-notification.sh', regexp1: 'thisisnottherealsecret', replace: "{{ vaulted.ifttt_webhook_key }}" }
  tags: icinga
  changed_when: false
  no_log: true

# Create the pods and services
- name: Apply Icinga Primary Kustomize script
  command: kubectl apply -k primary
  args:
    chdir: /usr/local/src/icinga
  changed_when: false
  tags: icinga

# Setup Metrics Services
- name: Get the Metrics repo
  git:
    repo: git@bitbucket.org:davidasnider/metrics_k8s.git
    dest: /usr/local/src/metrics_k8s
    key_file: /home/ansible/.ssh/id_rsa
    depth: '1'
    accept_hostkey: yes
    version: "master"
  tags: metrics

# Create the pods and services
- name: Apply Metrics Kustomize script
  command: kubectl apply -k prod
  args:
    chdir: /usr/local/src/metrics_k8s
  changed_when: false
  tags: metrics
