  # We do this here because at least one node needs to be installed in order to
  # get the loadBalancerIP
  # Let's wait for the controller to be available

- name: Wait for MetalLB Deployment to be ready
  command: kubectl rollout status deployment.v1.apps/controller -n metallb-system
  register: cmd_res
  retries: 30
  delay: 10
  when:
  - masters[0] == inventory_hostname
  until: cmd_res.stdout.find("successfully rolled out") != -1
  changed_when: false

- name: set fact to amd64 for x86_64 architecture
  set_fact:
    hostarch: "amd64"
  when: ansible_architecture == 'x86_64'

- name: set fact to arm for arfmv7l architecture
  set_fact:
    hostarch: "arm"
  when: ansible_architecture == 'armv7l'

- name: unzip kustomize zip
  unarchive:
    src: 'https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize/v{{ kustomize_version }}/kustomize_v{{ kustomize_version }}_linux_{{ hostarch }}.tar.gz'
    dest: /usr/local/bin
    remote_src: yes
    creates: /usr/local/bin/kustomize
    group: staff
    owner: root
    mode: '0755'
  delegate_to: '{{ masters[0] }}'
  when:
  - masters[0] == inventory_hostname
  tags: kustomize

- import_tasks: nonprod_services.yaml
  when:
  - not prod_cluster
  - masters[0] == inventory_hostname

- import_tasks: prod_services.yaml
  when:
  - prod_cluster | bool
  - masters[0] == inventory_hostname

- name: download the dashboard kustomize files
  copy:
    src: dashboard
    dest: /usr/local
    mode: '0644'
  tags: dashboard-install
  delegate_to: '{{ masters[0] }}'
  when:
  - masters[0] == inventory_hostname

- name: install the Dashboard on nonprod
  command: kubectl apply -k /usr/local/dashboard/nonprod
  register: dashboard_install
  tags: dashboard-install
  delegate_to: '{{ masters[0] }}'
  when:
  - masters[0] == inventory_hostname
  - not prod_cluster # False
  changed_when: "'configured' in dashboard_install.stdout"

- name: install the Dashboard on prod
  command: kubectl apply -k /usr/local/dashboard/prod
  register: dashboard_install
  tags: dashboard-install
  delegate_to: '{{ masters[0] }}'
  when:
  - masters[0] == inventory_hostname
  - prod_cluster # Is true
  changed_when: "'configured' in dashboard_install.stdout"

- name: download the dashboard users files
  copy:
    src: dashboard-user.yaml
    dest: /var/lib/rancher/k3s/server/manifests/dashboard-user.yaml
    mode: '0644'
  tags: dashboard-install
  delegate_to: '{{ masters[0] }}'
  when:
  - masters[0] == inventory_hostname

- name: Copy kubeconfig to /tmp
  command: cp /etc/rancher/k3s/k3s.yaml /tmp/k3s.yaml
  changed_when: false
  tags: kubeconfig
  when:
  - masters[0] == inventory_hostname

- name: Get default user token
  shell: kubectl -n kube-system describe secret admin-user-token | awk '$1=="token:"{print $2}'
  register: token
  changed_when: false
  tags: kubeconfig
  when:
  - masters[0] == inventory_hostname

- name: Replace 127.0.0.1 with cluster vip
  ansible.builtin.replace:
    path: /tmp/k3s.yaml
    regexp: '127.0.0.1'
    replace: '{{ vip }}'
  tags: kubeconfig
  when:
  - masters[0] == inventory_hostname

- name: Replace default with cluster name
  ansible.builtin.replace:
    path: /tmp/k3s.yaml
    regexp: ': default$'
    replace: ': {{ cluster_name }}'
  tags: kubeconfig
  when:
  - masters[0] == inventory_hostname

- name: Add token for logins via dashboard
  shell: kubectl config set-credentials {{ cluster_name }} --token={{ token.stdout }} --kubeconfig /tmp/k3s.yaml
  tags: kubeconfig
  when:
  - masters[0] == inventory_hostname

- name: Copy kubeconfig to local machine
  ansible.builtin.fetch:
    src: /tmp/k3s.yaml
    dest: ~/.kube/{{ cluster_name }}.kubeconfig
    flat: yes
  changed_when: false
  tags: kubeconfig
  when:
  - masters[0] == inventory_hostname


# Setup local storage volumes on servers who have fast disks
- name: download the local storage class file
  copy:
    src: local-storage.yaml
    dest: /usr/local/src/local-storage.yaml
    mode: '0644'
  tags: localstorage
  when:
  - masters[0] == inventory_hostname

- name: apply local-storage as it's not working in manifests
  command: kubectl apply -f /usr/local/src/local-storage.yaml
  tags: logalstorage
  when:
  - masters[0] == inventory_hostname

- name: Copy the provisioner manifest
  copy:
    src: provisioner-generated.yaml
    dest: /var/lib/rancher/k3s/server/manifests/provisioner-generated.yaml
    mode: '0644'
  tags: localstorage
  when:
  - masters[0] == inventory_hostname

# Ensure CoreDNS has anti affinity rules
- name: Copy the coredns patch file
  copy:
    src: dns-antiaffinity.yaml
    dest: /usr/local/src/dns-antiaffinity.yaml
    mode: '0644'
  tags: dns-antiaffinity
  when:
  - masters[0] == inventory_hostname

- name: Apply coredns anti affinity rules
  shell: kubectl patch deployment coredns -n kube-system --type merge --patch "$(cat /usr/local/src/dns-antiaffinity.yaml)"
  when:
  - masters[0] == inventory_hostname
  tags: dns-antiaffinity
  register: coredns
  changed_when: "'configured' in coredns.stdout"
